buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
	    classpath project(':jpsg:gradle-plugin')
        classpath project('template-processors')
        classpath project('impl-generator')
	    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	}
}

if (libTargetJava != '6' && libTargetJava != '8')
    throw new GradleException('libTargetJava should be either 6 or 8')

def apiProject = project('api')
def implProject = project('impl')

configure([apiProject, implProject, project('testing')]) {
    applyJpsg()
    apply plugin: 'findbugs'

    def jpsgTasks = [generateJavaSpecializations]
    def generateTestSpecializations = tasks.findByName('generateTestJavaSpecializations')
    if (generateTestSpecializations != null)
        jpsgTasks << generateTestSpecializations
    configure(jpsgTasks) {
        addProcessor 'net.openhft.jpsg.FunctionProcessor'
        addProcessor 'net.openhft.jpsg.Jdk8FunctionReplacer'
        with "jdk=JDK$libTargetJava"
    }

    findbugs {
        toolVersion '3.0.0'
        effort = 'max'
        reportLevel = 'high'
        excludeFilter = file("$parent.projectDir/findbugs/config/excludeFilter.xml")
    }
}

configure([apiProject, implProject]) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-maven'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven'

    setSourceCompatibility(project, "1.$libTargetJava")

    dependencies {
        provided 'com.google.auto.value:auto-value:1.0-rc1'
    }

    compileJava {
        // To suppress warnings about usages of sun.misc.Unsafe API
        options.compilerArgs << '-XDignore.symbol.file'
        options.compilerArgs << '-Xlint:-deprecation' << '-Xlint:-overloads'
        options.fork = true
        def javac = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'
        options.forkOptions.executable = javac
    }

    test.testLogging.exceptionFormat = 'full'

    group = 'net.openhft'
    version = '0.5.1'

    archivesBaseName  = "hftc-$project.name-jdk${libTargetJava == '6' ? '6-7' : '8'}"

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    ext {
        if (!project.hasProperty('sonatypeUrl'))
            sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
        if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
    }

    ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: sonatypeUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
        }
    }

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured { pom ->
        pom.dependencies.removeAll { dep -> dep.scope == 'test' }
        pom.project {
            name = "HFT Collections (${project == apiProject ? 'API' : 'implementation'})"
            description = 'Trove of primitive collections with Apache 2.0 license, ' +
                    "built for Java Java ${libTargetJava == '6' ? '6 or 7' : '8'}"
            url = 'https://github.com/OpenHFT/hftc'
            inceptionYear = '2013'
            organization {
                name = 'Higher Frequency Trading'
                url = 'http://openhft.net'
            }
            licenses {
                license {
                    name = 'The Apache Software License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution = 'repo'
                }
            }
            scm {
                url = 'https://github.com/OpenHFT/hftc'
                connection = 'scm:git:git://github.com/OpenHFT/hftc'
                developerConnection = 'scm:git:git://github.com/OpenHFT/hftc'
            }
            developers {
                developer {
                    id = 'leventov'
                    name = 'Roman Leventov'
                    email = 'leventov@ya.ru'
                    url = 'http://www.leventov.ru'
                    organization = 'Higher Frequency Trading'
                    organizationUrl = 'http://openhft.net'
                    timezone = '+4'
                }
            }
            issueManagement {
                system = 'GitHub'
                url = 'https://github.com/OpenHFT/hftc/issues'
            }
        }
    }

    idea.module {
        excludeDirs.remove(file("$buildDir/classes"))
        // AutoValue implementations are located there
        sourceDirs += sourceSets*.output.classesDir
    }
}